/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_alipay_mobile_quinox_classloader_InitExecutor.h"
#include <stdlib.h>
#include <android/log.h>
#include <sys/file.h>
#include <errno.h>
#define LOG_TAG "dexopt"

#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
/* Header for class com_alipay_mobile_quinox_classloader_InitExecutor */
char *dexoptBin = "/bin/dexopt";
void dexopt(const char* apkPath,const char* dexPath,const char* args );
/* Class:     com_alipay_mobile_quinox_classloader_InitExecutor
 * Method:    dexopt
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_alipay_mobile_quinox_classloader_InitExecutor_dexopt
  (JNIEnv *env, jclass clazz, jstring japkPtah , jstring jdexPtah, jstring jargs){

	const char* apkPath = env->GetStringUTFChars(japkPtah, 0);

	const char* dexPath = env->GetStringUTFChars(jdexPtah, 0);
	const char* args = env->GetStringUTFChars(jargs, 0);

dexopt(apkPath,dexPath,args);

	env->ReleaseStringUTFChars( japkPtah, apkPath);
	env->ReleaseStringUTFChars( jdexPtah, dexPath);
	env->ReleaseStringUTFChars( jargs, args);
}


void dexopt(const char* apkPath,const char* dexPath,const char* args ){




	 char* ANDROID_ROOT = getenv("ANDROID_ROOT");
	 	int  sizeANDROID_ROOT=0;
	  if ( ANDROID_ROOT!=NULL )
	  {
		  sizeANDROID_ROOT = strlen(ANDROID_ROOT);
	  }
	  else
	  {
		  __android_log_print(6, "DexInv", "ANDROID_ROOT not set, defaulting to /system");
	    sizeANDROID_ROOT = 7;
	    ANDROID_ROOT = "/system";
	  }


	 int sizedexoptBin = strlen(dexoptBin);
	 char * dest = (char *)malloc(sizedexoptBin + sizeANDROID_ROOT + 1);
	  strcpy(dest, ANDROID_ROOT);
	  strcat(dest, dexoptBin);

	  struct stat statApkPath;



	  stat(apkPath, &statApkPath);
	  int tmp=open(apkPath, 0, 0);
	  if(tmp<0){

		  __android_log_print(6, "DexInv", "DexInv cannot open '%s' for input\n", apkPath);
		  return;
	  }

	  if ( access(dexPath, 0) != -1 )
	  {
		  __android_log_print(3, "DexInv", "Skip DexInv");
	    return;
	  }


	int  fd = open(dexPath, 66, 420);

	  if ( fd >= 0 )
	  {
	    int  lockVal = flock(fd, 6);

	    if(lockVal!=0){


	    	char *error=strerror(errno);

	    	__android_log_print(6, "DexInv", "flock(%s) failed: %s\n", dexPath, error);

	        flock(fd, 8);
	        close(fd);
	        return;
	    }

	    __android_log_print(3, "DexInv", "DexInv: --- BEGIN '%s' --- flags='%s'\n", apkPath, args);


	// execl(dest, dest, "--zip", s, v30, apkPath, args, 0);












	  }
}

